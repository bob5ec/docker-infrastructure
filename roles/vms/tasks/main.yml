---
# tasks file for vms

- name: get virt-install tools
  apt:
    name:
      - virtinst
      - xmlstarlet
      - bzip2
    state: present

- name: Download Container Linux
  get_url:
    url: https://stable.release.core-os.net/amd64-usr/current/coreos_production_qemu_image.img.bz2
    dest: /var/lib/libvirt/images/coreos_production_qemu_image.img.bz2
    mode: 0440
- name: Extract Container Linux
  command: creates="/var/lib/libvirt/images/coreos_production_qemu_image.img" |
    cat /var/lib/libvirt/images/coreos_production_qemu_image.img.bz2 | bunzip2 /var/lib/libvirt/images/coreos_production_qemu_image.img
#  notify:
#    - Reset Container Linux

#TODO get notified about an update (don't use latest)
- name: get Container Linux Config Transpiler (ct)
  get_url:
    url: https://github.com/coreos/container-linux-config-transpiler/releases/download/v0.5.0/ct-v0.5.0-x86_64-unknown-linux-gnu
    dest: /usr/local/bin/ct
    mode: 0755

#TODO assign different IP to each coreosVM via ignition. Create file with template or use /etc/envirounment
#TODO 1. add bootstrap files to ignition with master only 2. set master/worker as var?
#TODO different dev, qa, and prod ignition??
- name: 3... 2... 1... Create Ignition
  template: src=ignition.j2 dest=/var/lib/libvirt/images/{{env}}{{item}}.yml
  register: ignition
#  notify:
#    - Compile yml to ign
  with_sequence: "count={{ vm_count }}"

- debug: "msg=env: {{env}} item: {{item}} item.item: {{item.item}}"
  when: item.changed
  with_items: "{{ ignition.results }}"

#TODO this is renundant code compared to the trigger
- name: Create qcow2 disk
  shell: "qemu-img create -f qcow2 -b coreos_production_qemu_image.img {{ env }}{{item}}.qcow2"
  args:
    chdir: /var/lib/libvirt/images/
    creates: "{{ env }}{{item}}.qcow2"
  with_sequence: "count={{ vm_count }}"

- name: create VM
# this step creates a temp file as well...
#  command: creates="/etc/libvirt/qemu/container-linux1.xml" |
#  command: creates="/etc/libvirt/qemu/{{ envs[0]|quote }}.xml" |
  shell: virt-install \
    --connect qemu:///system \
    --import \
    --name "{{ env }}{{item}}" \
    --ram 1024 --vcpus 1 \
    --os-type=linux \
    --os-variant=virtio26 \
    --disk "path={{ env }}{{item}}.qcow2,format=qcow2,bus=virtio" \
    --vnc --noautoconsole \
    --network "bridge={{ env }}" \
    --print-xml > "{{ env }}{{item}}-domain-pre.xml"
  args:
    chdir: /var/lib/libvirt/images/
    creates: "/var/lib/libvirt/images/{{ env }}{{item}}-domain-pre.xml"
  with_sequence: "count={{ vm_count }}"
#    --name {{ envs[0]|quote }} \
#    --graphics none \
#    --console pty,target_type=serial \
#    --location 'http://ftp.nl.debian.org/debian/dists/jessie/main/installer-amd64/' \
#    --extra-args 'console=ttyS0,115200n8 serial'

#TODO set vm specific ignition
- name: set ignition file in xml
#  command: creates="/etc/libvirt/qemu/{{ envs[0]|quote }}.xml" |
#ignition_file=/var/lib/libvirt/images/container-linux/provision.ign
  shell: cp "{{ env }}{{item}}-domain-pre.xml" "{{ env }}{{item}}-domain.xml"; \
    xmlstarlet ed -P -L -i "//domain" -t attr -n "xmlns:qemu" --value "http://libvirt.org/schemas/domain/qemu/1.0" "{{ env }}{{item}}-domain.xml"; \
    xmlstarlet ed -P -L -s "//domain" -t elem -n "qemu:commandline" "{{ env }}{{item}}-domain.xml"; \
    xmlstarlet ed -P -L -s "//domain/qemu:commandline" -t elem -n "qemu:arg" "{{ env }}{{item}}-domain.xml"; \
    xmlstarlet ed -P -L -s "(//domain/qemu:commandline/qemu:arg)[1]" -t attr -n "value" -v "-fw_cfg" "{{ env }}{{item}}-domain.xml"; \
    xmlstarlet ed -P -L -s "//domain/qemu:commandline" -t elem -n "qemu:arg" "{{ env }}{{item}}-domain.xml"; \
    xmlstarlet ed -P -L -s "(//domain/qemu:commandline/qemu:arg)[2]" -t attr -n "value" -v "name=opt/com.coreos/config,file=/var/lib/libvirt/images/{{env}}{{item}}.ign" "{{ env }}{{item}}-domain.xml"
  args:
    chdir: /var/lib/libvirt/images/
    creates: "/var/lib/libvirt/images/{{ env }}{{item}}-domain.xml"
  with_sequence: "count={{ vm_count }}"


#- name: Copy Ignition Config
#  copy:
#    src: "{{ role_path }}/files/provision.ign"
#    dest: /var/lib/libvirt/images/provision.ign
#  notify: Reset Container Linux


#- name: Set CoreOS Envirounment
#  copy:
#    src: "{{ role_path }}/files/provision.ign"
#    dest: /var/lib/libvirt/images/provision.ign

- name: define VM
  virt:
    name: "{{ env }}{{item}}"
    command: define
    xml: "{{lookup('file', '/var/lib/libvirt/images/{{ env }}{{item}}-domain.xml') }}"
  with_sequence: "count={{ vm_count }}"

- name: run VM
  virt:
    name: "{{ env }}{{item}}"
    state: running
  with_sequence: "count={{ vm_count }}"
#virsh define $domain
#virsh start container-linux1

#
#virsh define $domain
#virsh start container-linux1

# use ignition to register a deploy container that contains docker-compose


#Container Linux deploy script

#create xml file
#domain=/var/lib/libvirt/images/container-linux/container-linux1-domain.xml

#virt-install --connect qemu:///system \
#             --import \
#             --name container-linux1 \
#             --ram 1024 --vcpus 1 \
#             --os-type=linux \
#             --os-variant=virtio26 \
#             --disk path=/var/lib/libvirt/images/container-linux/container-linux1.qcow2,format=qcow2,bus=virtio \
#             --vnc --noautoconsole \
#             --print-xml > $domain

# set ignition file in xml

#ignition_file=/var/lib/libvirt/images/container-linux/provision.ign
#
#xmlstarlet ed -P -L -i "//domain" -t attr -n "xmlns:qemu" --value "http://libvirt.org/schemas/domain/qemu/1.0" "${domain}"
#xmlstarlet ed -P -L -s "//domain" -t elem -n "qemu:commandline" "${domain}"
#xmlstarlet ed -P -L -s "//domain/qemu:commandline" -t elem -n "qemu:arg" "${domain}"
#xmlstarlet ed -P -L -s "(//domain/qemu:commandline/qemu:arg)[1]" -t attr -n "value" -v "-fw_cfg" "${domain}"
#xmlstarlet ed -P -L -s "//domain/qemu:commandline" -t elem -n "qemu:arg" "${domain}"
#xmlstarlet ed -P -L -s "(//domain/qemu:commandline/qemu:arg)[2]" -t attr -n "value" -v "name=opt/com.coreos/config,file=${ignition_file}" "${domain}"
#
#virsh define $domain
#virsh start container-linux1

#- name: get libvirt for python
#  apt:
#    name: python-libvirt
#    state: present

#- name: define vm
#  virt:
#    name: foo
#    command: define
#    xml: "{{ lookup('template', playbook_dir + '/templates/container-template.xml.j2') }}"
#    xml: "
#<domain type='kvm'>
#  <name>{{ envs[0] }}</name>
#  <memory unit='KiB'>1048576</memory>
#  <currentMemory unit='KiB'>1048576</currentMemory>
#  <vcpu placement='static'>1</vcpu>
#  <os>
#    <type arch='x86_64' machine='pc-i440fx-2.1'>hvm</type>
#  </os>
#  <features>
#    <acpi/>
#
#    </redirdev>
#    <memballoon model='virtio'>
#      <address type='pci' domain='0x0000' bus='0x00' slot='0x08' function='0x0'/>
#    </memballoon>
#  </devices>
#</domain>
#"


#- name: Create VM
#  action: virt name=kvm-guest command=status 
#   register: result 
#   until: result.status.find("shutdown") != -1 
#   retries: 30 
#   delay: 5 


# ALTERNATIVE the debian native way
# run vm-preseed install.
# After install finished run ansible-pull directly on the new machine, 
# set ansible pull branch and preseed branch differently: PROD = master, qa=qa, dev=dev
#- name: create VM from install media
#  command: creates="/etc/libvirt/qemu/{{ envs[0]|quote }}.xml" |
#    virt-install \
#    --name {{ envs[0]|quote }} \
#    --ram 1024 \
#    --disk size=8 \
#    --vcpus 1 \
#    --os-type linux \
#    --os-variant generic \
#    --network bridge=virbr0 \
#    --graphics none \
#    --console pty,target_type=serial \
#    --location 'http://ftp.nl.debian.org/debian/dists/jessie/main/installer-amd64/' \
#    --extra-args 'console=ttyS0,115200n8 serial'
