---
# tasks file for vms

- name: get virt-install tools
  apt:
    name:
      - virtinst
    state: present

- name: Create data disks for nonprod
  shell: dd if=/dev/zero "of={{ env }}-data.img" count=10000; \
    mkfs.ext3 "{{ env }}-data.img"; \
    dd if=/dev/zero "of={{ env }}-data2.img" count=10000; \
    mkfs.ext4 "{{ env }}-data2.img"
  args:
    chdir: /var/lib/libvirt/images/
    creates: "{{ env }}-data2.img"
#TODO attach real disks
  when: env != "prod"

- name: Link prod data disk
  file:
    src: /dev/mapper/data-niobe
    dest: /var/lib/libvirt/images/prod-data.img
    state: link
  when: env == "prod"

- name: Link prod data2 disk
  file:
    src: /dev/mapper/data2-data2
    dest: /var/lib/libvirt/images/prod-data2.img
    state: link
  when: env == "prod"
#
#- name: Create data disks for prod
#  shell: "ln -s /dev/sdb {{ env }}-data.img && ln -s /dev/sdc {{ env }}-data2.img"
#  args:
#    chdir: /var/lib/libvirt/images/
#    creates: "{{ env }}-data2.img"
#  when: env == "prod"

    #- name: mount data disk
    #  mount:
    #    name: /tmp/newdisk_data
    #    src: "/var/lib/libvirt/images/{{ env }}-data.img"
    #    fstype: ext4
    #    state: mounted

    #- name: create home
    #  file:
    #    path: /tmp/newdisk_data/home
    #    state: directory

    #- name: unmount data disk
    #  mount:
    #    name: /tmp/newdisk_data
    #    src: "/var/lib/libvirt/images/{{ env }}-data.img"
    #    fstype: ext4
    #    state: absent

- name: create VM
# this step creates a temp file as well...
#  command: creates="/etc/libvirt/qemu/container-linux1.xml" |
#  command: creates="/etc/libvirt/qemu/{{ envs[0]|quote }}.xml" |
#    --initrd-inject=/etc/docker-infrastructure/deploy/vm.preseed --extra-args "ks=file:/vm.ks" 
  shell: virt-install \
    --connect qemu:///system \
    --name "{{ env }}{{item}}" \
    --ram "{{ vm_ram_size }}" --vcpus "{{ vm_vcpus }}" \
    --os-type=linux \
    --os-variant=virtio26 \
    --rng /dev/urandom \
    --disk "path={{ env }}{{item}}.qcow2,format=qcow2,size={{vm_disk_size}},bus=virtio" \
    --disk "path={{ env }}-data.img,format=raw,bus=virtio" \
    --disk "path={{ env }}-data2.img,format=raw,bus=virtio" \
    --network "bridge={{ env }}" \
    --graphics none \
    --autostart \
    --console pty,target_type=serial \
    --location 'https://mirror.netcologne.de/debian/dists/stretch/main/installer-amd64/' \
    --extra-args 'console=ttyS0,115200n8 serial auto=true priority=critical netcfg/hostname={{ env }}{{item}} preseed/url=https://raw.githubusercontent.com/bob5ec/docker-infrastructure/{{ env }}/deploy/vm.preseed'
  args:
    chdir: /var/lib/libvirt/images/
    creates: "/etc/libvirt/qemu/{{ env }}{{item}}.xml"
# for now we do not run a cluster
  with_sequence: "count={{ vm_count }}"
