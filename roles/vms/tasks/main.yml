---
# tasks file for vms

- name: get virt-install
  apt:
    name: virtinst
    state: present

#TODO
# run vm-preseed install.
# After install finished run ansible-pull directly on the new machine, 
# set ansible pull branch and preseed branch differently: PROD = master, qa=qa, dev=dev

- name: create VM from install media
  #command: creates="/etc/libvirt/qemu/dev.xml" "virt-install \
  command: |
    virt-install \
    --name {{ envs[0]|quote }} \
    --ram 1024 \
    --disk path=./dev.qcow2,size=8 \
    --vcpus 1 \
    --os-type linux \
    --os-variant generic \
    --network bridge=virbr0 \
    --graphics none \
    --console pty,target_type=serial \
    --location 'http://ftp.nl.debian.org/debian/dists/jessie/main/installer-amd64/' \
    --extra-args 'console=ttyS0,115200n8 serial'


#- name: get libvirt for python
#  apt:
#    name: python-libvirt
#    state: present

#- name: define vm
#  virt:
#    name: foo
#    command: define
#    xml: "{{ lookup('template', playbook_dir + '/templates/container-template.xml.j2') }}"
#    xml: "
#<domain type='kvm'>
#  <name>{{ envs[0] }}</name>
#  <memory unit='KiB'>1048576</memory>
#  <currentMemory unit='KiB'>1048576</currentMemory>
#  <vcpu placement='static'>1</vcpu>
#  <os>
#    <type arch='x86_64' machine='pc-i440fx-2.1'>hvm</type>
#  </os>
#  <features>
#    <acpi/>
#
#    </redirdev>
#    <memballoon model='virtio'>
#      <address type='pci' domain='0x0000' bus='0x00' slot='0x08' function='0x0'/>
#    </memballoon>
#  </devices>
#</domain>
#"


#- name: Create VM
#  action: virt name=kvm-guest command=status 
#   register: result 
#   until: result.status.find("shutdown") != -1 
#   retries: 30 
#   delay: 5 
