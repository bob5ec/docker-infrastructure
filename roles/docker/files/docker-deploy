#!/bin/bash
#TODO use ansible facts to get the env
export ENV=`grep -Eo '([A-Za-z]+)' /etc/hostname`
repo="https://github.com/bob5ec/running-docker-stack.git"
target=".running_docker_stack"

if [ "$1" == "down" ]; then
	if [ ! "$2" == "-l" ]; then
		cd
		cd $target
	fi
	for compose in *.yml; do
		#use every yml as compose file and project name
		compose_base=`basename $compose .yml`
		
		if [ -f "$compose_base/secrets/compose" ]; then
			source $compose_base/secrets/compose
		fi
		base=""
		if [ -n $3 ]; then
			base="-f $3"
		fi
		/usr/local/bin/docker-compose $base -f $compose -p $compose_base down -v
	done
	exit 0
fi

if [ ! "$ENV" == "prod" -a ! "$1" == "-d" -a ! "$1" == "-l" ]; then
	echo "Run docker-deploy -d to deploy in non-prod or -l to deploy the current git branch."
	exit 0
fi

CHANGED_REPO=0
if [ "$1" == "-l" ]; then
	#running docker-deploy local in the current directory
	CHANGED_REPO=1
	if [ ! -z "$ENV" ]; then
		export ENV=`git rev-parse --abbrev-ref HEAD`
	fi
else
	cd
	if [ ! -d "$target" ]; then
		git clone -b $ENV $repo $target
		cd $target
		CHANGED_REPO=1
	else
		cd $target
		git pull |grep "Already up-to-date"
		CHANGED_REPO=$?
	fi
	git-crypt unlock || exit 1
fi

# first line is chaty docker
RUNNING_IMAGES=`docker ps|wc -l`

for compose in *.yml; do
	#use every yml as compose file and project name
	compose_base=`basename $compose .yml`
	base=""
	if [ -n "$2" ]; then
		base="-f $2"
	fi
	
	if [ -f "$compose_base/secrets/compose" ]; then
		source $compose_base/secrets/compose
	fi

	if [ -f "$compose_base/volumes" ]; then
		#create all volumes in that file...
		while IFS= read -r line
		do
			# ... if they do not exist
			inspect=$((docker volume inspect $line) 2>&1)
			if [[ $inspect =~ "Error: No such volume" ]]; then
				echo -n "creating volume "
				docker volume create "$line"
			fi
		done < $compose_base/volumes
	fi

	BEFORE=`docker images`
#	if [ ! "$1" == "-l" ]; then
	/usr/local/bin/docker-compose $base -f $compose -p $compose_base pull
#	fi
	AFTER=`docker images`

	if [ "$RUNNING_IMAGES" == "1" -o "$BEFORE" != "$AFTER" -o "$CHANGED_REPO" == "1" ]; then
		# TODO side effect: variables are present for all compose files althogh just defined for one
		/usr/local/bin/docker-compose $base -f $compose -p $compose_base down -v
		/usr/local/bin/docker-compose $base -f $compose -p $compose_base up -d
	fi
done
#TODO improve secrets security, e.g. copy them into the container
#git-crypt lock
